<?php

namespace App\Models;

use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;

/**
 * Class Job
 * @package App\Models
 */
class Job extends Model
{
    use HasFactory;

    protected $table = 'jobs';

    protected $fillable = [
        'created_at',
        'modified_at',
        'title',
        'salary_low',
        'salary_high',
        'type',
        'description',
    ];

    /**
     * Relation Job -> Company
     * @return BelongsTo
     */
    public function company(): BelongsTo
    {
        return $this->belongsTo(Company::class);
    }

    /**
     * Relation Job -> Category
     * @return BelongsTo
     */
    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    /**
     * getAllShowsAndCompanyInfo method.
     * Retrieves all shows & the employer's info
     */
    public static function getAllShowsAndCompanyInfo(Request $request = null, $sortMethod = null, $refined = false): LengthAwarePaginator
    {
        DB::enableQueryLog();
        $query = DB::table('jobs as jo')
            ->join('companies as co', 'co.id', '=', 'jo.company_id')
            ->join('locations as lo', 'lo.id', '=', 'co.location_id')
            ->select('jo.*',
                DB::raw('DATEDIFF(jo.created_at, NOW()) as date_posted'),
                'co.location_id',
                'co.name',
                'co.description',
                'co.verified',
                'co.pic_url',
                'lo.country_name');

        if (!is_null($sortMethod)) {
            if ($sortMethod === 'random') {
                $query->inRandomOrder();
            }

            if ($sortMethod === 'newest') {
                $query->orderBy('jo.created_at', 'desc');
            } else {
                // orderBy($column, $direction = 'asc')
                $query->orderBy('jo.created_at');
            }
        }

        if (isset($request->title) && !is_null($request->title)) {
            $query = self::getJobsWithTitle($query, $request);
        }

        // If user searches for different criterias
        if ($refined) {
            $query = self::refinedSearch($query, $request);
        }

        $jobs = $query->paginate(4);

        return self::removeDashesFromDates($jobs);
    }

    /**
     * getCountries method.
     * Retrieves all countries and their alpha2 codes.
     * @return Collection
     */
    public static function getCountries(): Collection
    {
        return DB::table('locations')->select('id', 'country_name as name')->get();
    }

    /**
     * getJobsWithTitle method.
     * Searches any match with a given title
     * @param $query
     * @param Request $request
     * @return mixed
     */
    public static function getJobsWithTitle($query, Request $request)
    {
        $query->where('title', 'like', '%' . $request->title . '%');

        return $query;
    }

    /**
     * refinedSearch method.
     * Searches for any record match with user's search criterias
     * @param $query
     * @param Request $request
     * @return mixed
     */
    protected static function refinedSearch($query, Request $request)
    {

        if (isset($request->country)) {
            $location_id = $request->country;
            $query->where('co.location_id', '=', $location_id);

        }

        if (isset($request->category) && !is_null($request->category)) {
            $query->join('categories as ca', 'ca.id', '=', 'jo.category_id')
                ->where('jo.category_id', '=', $request->category);
        }

        $jobType = [];

        if (isset($request->freelance)) {
            $jobType[] = 'freelance';
        }

        if (isset($request->full_time)) {
            $jobType[] = 'Full Time';
        }

        if (isset($request->full_time)) {
            $jobType[] = 'Full Time';
        }

        if (isset($request->part_time)) {
            $jobType[] = 'Part Time';
        }

        if (isset($request->internship)) {
            $jobType[] = 'internship';
        }

        if (isset($request->temporary)) {
            $jobType[] = 'temporary';
        }

        if (!empty($jobType)) {
            $query->whereIn('jo.type', $jobType);
        }

        return $query;
    }

    /**
     * removeDashesFromDates method.
     * Removes the dash from the date generated by the DATEDIFF() func. from MYSQL.
     * @param $jobs
     * @return mixed
     */
    public static function removeDashesFromDates($jobs): LengthAwarePaginator
    {
        foreach ($jobs as $job) {
            $job->created_at = str_replace('-', '', $job->date_posted);
        }

        return $jobs;
    }
}
