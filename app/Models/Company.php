<?php

namespace App\Models;

use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;

class Company extends Model
{
    use HasFactory;

    protected $table = 'companies';
    protected $fillable = [
        'name',
        'description',
        'verified',
        'pic_url',
    ];

    /**
     * Relation Company -> User
     * @return BelongsTo
     */
    public function user() {
        return $this->belongsTo(User::class);
    }

    public static function getFirstSetOfCompanies(): LengthAwarePaginator
    {
        return DB::table('companies as co')
            ->select('co.id',
                'co.slug',
                'co.name',
                'co.verified',
                'co.pic_url')
            ->where('co.name', 'like', 'A%')
            ->paginate(6);
    }

    /**
     * Searches all companies starting with a specific letter
     * @param string $letter
     * @return LengthAwarePaginator
     * @see company@index
     */
    public static function searchCompaniesByLetter(string $letter): LengthAwarePaginator
    {
        return DB::table('companies as co')
            ->select('co.id',
                'co.slug',
                'co.name',
                'co.verified',
                'co.pic_url')
            ->where('co.name', 'like', $letter . '%')
            ->paginate(6);
    }

    /**
     * getOpenPositionsOfCompany method.
     * Fetches a set of randomized jobs from a specific company
     * @param int $id company's id
     */
    public static function getOpenPositionsOfCompany(int $company_id) {
        $positions =  DB::table('jobs as jo')
            ->join('categories as ca', 'ca.id', '=', 'jo.category_id')
            ->join('companies as co', 'co.id', '=', 'jo.company_id')
            ->join('locations as lo', 'lo.id', '=', 'co.location_id')
            ->select(
                'jo.id',
                'jo.title',
                'jo.slug',
                'jo.type',
                'lo.country_name',
                DB::raw('DATEDIFF(jo.created_at, NOW()) as date_posted'),
                'ca.name'
            )
            ->where('jo.open', '=', 1)
            ->where('jo.company_id', '=', $company_id)
            ->limit(3)
            ->get();

        self::removeDashesFromDates($positions);

        return $positions;
    }

    /**
     * removeDashesFromDates method.
     * Removes the dash from the date generated by the DATEDIFF() func. from MYSQL.
     * @param $jobs
     * @return mixed
     */
    public static function removeDashesFromDates($positions)
    {
        // If $positions is a single entity
        if (!is_countable($positions)) {
            $positions->date_posted = str_replace('-', '', $positions->date_posted);
        } else {
            foreach ($positions as $position) {
                $position->date_posted = str_replace('-', '', $position->date_posted);
            }
        }

        return $positions;
    }
}
