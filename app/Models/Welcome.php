<?php
/** @noinspection ALL */
declare(strict_types = 1);

namespace App\Models;

use App\Http\Controllers\Controller;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\DB;

class Welcome extends Model
{
    use HasFactory;

    /**
     * getFeaturedJobs method.
     * Retrieves a random set of featured jobs.
     *
     * @return Collection
     */
    public static function getFeaturedJobs(): Collection
    {
        $featuredJobs = DB::table('jobs as jo')
            ->select('jo.id',
                'jo.title',
                'jo.slug',
                DB::raw('DATEDIFF(jo.created_at, NOW()) as date_posted'),
                'jo.type',
                'co.name as company',
                'co.pic_url as pic',
                'lo.country_name as country')
            ->join('companies as co', 'co.id', '=', 'jo.company_id')
            ->join('locations as lo', 'co.location_id', '=', 'lo.id')
            ->where('featured', '=', 1)
            ->inRandomOrder()
            ->limit(5)
            ->get();

        return self::removeDashesFromDates($featuredJobs);
    }

    /**
     * removeDashesFromDates method.
     * Removes the dash from the date generated by the DATEDIFF() func. from MYSQL.
     *
     * @param Collection $featuredJobs
     *
     * @return Collection
     */
    public static function removeDashesFromDates(Collection $featuredJobs): Collection
    {
        foreach ($featuredJobs as $job) {
            $job->date_posted = str_replace('-', '', (string)$job->date_posted);
        }

        return $featuredJobs;
    }

    /**
     * getFeaturedFreelancers method.
     * Retrieves a random set of featured freelancers.
     *
     * @return Collection
     */
    public static function getFeaturedFreelancers(): Collection
    {
        return DB::table('users as u')
            ->join('freelancers as fr', 'fr.user_id', '=', 'u.id')
            ->join('freelancer_jobs_done as frjb', 'frjb.freelancer_id', '=', 'fr.id')
            ->join('categories as cat', 'cat.id', '=', 'fr.category_id')
            ->join('locations as lo', 'lo.id', '=', 'fr.location_id')
            ->select(DB::raw('fr.id'),
                'u.pic_url',
                'fr.verified',
                DB::raw("CONCAT(fr.firstname, ' ', fr.lastname) as fullName"),
                'lo.country_code',
                'cat.name as speciality',
                'lo.country_name',
                'fr.hourly_rate',
                DB::raw('SUM(IF(frjb.success = 1, 1, 0)) / COUNT(frjb.id) *100 as success'),
                'u.dir_url')
            ->groupBy('fr.id')
            ->where('fr.verified', '=', 1)
            ->inRandomOrder()
            ->limit(8)
            ->get();
    }

    /**
     * getCountJobsCategories method.
     *
     * Retrieves the total amount of jobs per category
     */
    public static function jobsPerCategory($categories)
    {
        foreach ($categories as $category) {
            $category->jobCount = DB::table('jobs as jo')
                ->select(
                    DB::raw('COUNT(jo.id) as amount')
                )->where('jo.category_id', '=', $category->id)
                ->first()
                ->amount;
        }

        return $categories;
    }

    /**
     * getRecentTasks method.
     * Retrieves 4 tasks recently submitted
     *
     * @return Collection
     */
    public static function getRecentTasks(): Collection
    {
        $tasks = DB::table('tasks as ta')
            ->select('ta.id',
                'ta.name',
                'ta.budget_min',
                'ta.budget_max',
                'ta.type',
                DB::raw('DATEDIFF(NOW(), ta.created_at) as task_created_at'),
                'ta.employer_id',
                'ta.category_id',
                'lo.country_name as country',
                'skta.skills')
            ->join('locations as lo', 'lo.id', '=', 'ta.location_id')
            ->join('skills_tasks as skta', 'skta.task_id', '=', 'ta.id')
            ->limit(5)
            ->orderBy('ta.created_at', 'desc')
            ->get();
		
        foreach ($tasks as $task) {
            if (is_null($task->skills)) {
                $task->skills = ['None'];
            } else {
                // Turns the skills string into an array
                $task->skills = Controller::curateSkills($task->skills);
            }
        }

        return $tasks;
    }

    /**
     * searchJobsOrTasks method.
     * Handles the search request from the homepage
     *
     * @param Request $request
     * @param string  $jobOrTask
     *
     */
    public static function searchJobsOrTasks(Request $request, string $jobOrTask)
    {
        if ($jobOrTask === 'task') {
            $request->request->add(['task_category' => $request->category]);
        }

        if (!is_null($request->type)) {
            self::setType($request);
        }

        if ($jobOrTask === 'job') {
            return Job::getAllJobsAndCompanyInfo($request, false, true);
        }

        return Task::getTasks($request);
    }

    /**
     * checkIfLocationExists method.
     * Checks if the location requested by the user exists in the DDB.
     *
     * @param string $location
     *
     * @return mixed|void
     */
    public static function checkIfLocationExists(string $location)
    {
        $locationId = DB::table('locations as lo')
            ->select('id')
            ->where('country_name', 'LIKE', '%' . $location . '%')
            ->first();

        if (!is_null($locationId)) {
            return $locationId->id;
        }
    }

    private static function setType($request)
    {
        switch ($request->type) {
            case 'freelance':
                return $request->request->add(['freelance' => 'on']);
            case 'full-time':
                return $request->request->add(['full_time' => 'on']);
            case 'part-time':
                return $request->request->add(['part_time' => 'on']);
            case 'internship':
                return $request->request->add(['internship' => 'on']);
            case 'fixed':
                return $request->type = 'fixed';
            case 'hourly':
                return $request->type = 'hourly';
        }

        return false;
    }

    public static function isTaskOrJob($request)
    {
        $jobTypes = [
            'freelance',
            'full-time',
            'part-time',
            'internship'
        ];

        $taskTypes = [
            'fixed',
            'hourly'
        ];

        $searchIsJob = in_array($request->type, $jobTypes, true);
        $searchIsTask = in_array($request->type, $taskTypes, true);
        
        return $searchIsJob
            ? 'job'
            : 'task';
    }

    /**
     * checkIfCategoryExists method.
     * Checks if the category requested by the user exists in the DDB
     *
     * @param string $categoryId
     *
     * @return mixed
     */
    private static function checkIfCategoryExists(string $categoryId)
    {
        return DB::table('categories as cat')
            ->select('id')
            ->where('cat.id', '=', $categoryId)
            ->first();
    }
}